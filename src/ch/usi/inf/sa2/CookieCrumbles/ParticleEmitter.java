/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ch.usi.inf.sa2.CookieCrumbles;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.Random;

/**
 *
 * @author alexm
 */
public class ParticleEmitter {
    private int particleCount;
     double originX;
     double originY;
    private ArrayList particleList;
    Rectangle boundingBox;
    CCWall wall;
    CCWall wall2;
    ////Fields for Black Hole
    private double azimuthCounter = 0;
    private int azimuthTimes = 0;
    
 
    /**
     *
     * @param originX
     * @param originY
     * @param particleCount
     */
    public ParticleEmitter(double originX, double originY, int particleCount){
        this.particleCount = particleCount;
        this.originX = originX;
        this.originY = originY;
        boundingBox = new Rectangle((int) originX,(int) originY,35,35);
        particleList  = new ArrayList();    
        wall2 = new CCWall (2600,900, 300, 3.14);
        wall = new CCWall(2200, 500, 300 ,  3.14/3 - 1.17654345678);
    }
   
     /**
     *
     * @return
     */
    public double lengthRandomizer() {
        Random rand = new Random();
        double randomNum = rand.nextInt(55);
        return randomNum;
    }
     
    public double azimuthRandomizer() {
        Random rand = new Random();
        double randomNum = rand.nextInt(5);
        //System.out.println(randomNum);
        return randomNum/500;
    }
    

    
     public Rectangle getBoundingBox(){
         return boundingBox;
         
     }
     
     public void setBoundingBox(Rectangle rect){
         boundingBox = rect; 
     }
    
     
    /**
     *
     * @return
     */
    public double directionRandomizer() {
        Random rand = new Random();
        double min = 0;
        double max = 3.14;  //180 degreees!!
        double randomNum = min + (max - min) * rand.nextDouble();
        
        return randomNum;
    }
    
    public double getOriginX(){
        return originX;
    }
    
    /**
     *
     * @return
     */
    public double getOriginY(){
        return originY;
    }
    
    /**
     *
     * @param shiftXBy
     */
    public void setOriginX(double shiftXBy){
        originX = shiftXBy;
    }
    
    public void setOriginY ( double shiftYBy){
        originY = shiftYBy;
    }
    
    /**
     *
     * @param hi
     */
    public void setParticleList(ArrayList hi){
        particleList = hi;
    }
    
    
    /**
     *
     * @return
     */
    public ArrayList getParticleList(){
        return particleList;
    } 
    /*
     * Sets a number of particles generated by Particle 
     * emitter object.
     */
    public void setParticleCount( final int newCount){
        particleCount = newCount;
    }
   
    
    /**
     *
     * @return
     */
    public int getParticleCount() {
        return particleCount;
    }
    
    
  
    
    /**
     *
     * @param gr
     */
   
   double velocityMinus = 0;
    public void recalculate(final Graphics gr){
        Graphics2D g = (Graphics2D) gr;
        wall.drawWall(g);
        
        wall2.drawWall(g);    
        
        for (int i = 0; i <7; i++) {
        Particle myparticle = new Particle(originX+20, originY+15, originX+20 ,originY+15, directionRandomizer(), /// In radians
                0, 90, 
                lengthRandomizer(), 60);
        Shape particleNew = new Rectangle((int) originX,
                    (int) originY, 15, 55);
            myparticle.setParticleRect(particleNew);
        particleList.add(myparticle);
        }

        for (int i = 0; i < particleList.size(); i++) {
            Particle part = (Particle) particleList.get(i);
            Shape wallLine = wall.getWallShape();
            //System.out.println("" + part.getEmitterOriginX()+" " + part.getEmitterOriginY());
            Shape wallline2 = wall2.getWallShape();
            Shape particleRect2 = part.getParticleRect();
            Rectangle2D particleRect = particleRect2.getBounds2D();
            if (wallLine.intersects(particleRect)){
                double newOriginX =  part.positionGetX() + part.getEmitterOriginX() ;
                double newOriginY =  part.positionGetY() + part.getEmitterOriginY() ;
                part.setOriginX(newOriginX);
                part.setOriginY(newOriginY);
                CCVector reflected = wall.calculateReflected(part.getPositionReset(), newOriginX, newOriginY);
                part.setPosition(reflected);
                g.setPaint(Color.BLACK);
                Shape particleNew = new Rectangle((int) part.getEmitterOriginX()  ,
                    (int)part.getEmitterOriginY() , 15,15);
                part.setParticleRect(particleNew);
                
                g.fill(particleNew);
                part.setLifetime(175);
                
                
            }
            
            //// TO DELETE LATER
            
            if (wallline2.intersects(particleRect)){
                double newOriginX =  part.positionGetX() + part.getEmitterOriginX() ;
                double newOriginY =  part.positionGetY() + part.getEmitterOriginY() ;
                part.setOriginX(newOriginX);
                part.setOriginY(newOriginY);
                CCVector reflected = wall2.calculateReflected(part.getPositionReset(), newOriginX, newOriginY);
                part.setPosition(reflected);
                
                g.setPaint(Color.BLACK);
                Shape particleNew = new Rectangle((int) part.getEmitterOriginX()  ,
                    (int)part.getEmitterOriginY() , 15,15);
                part.setParticleRect(particleNew);
                g.fill(particleNew);
                part.setLifetime(175);
                
                
            }
            
            
            
            
            
            
            
            /////////// TILL HERE 
            
            
            
            
            int lifetime = part.getLifetime();
            lifetime++;
            part.setLifetime(lifetime);
            part.setNewPosition();
            double x = part.positionGetX();
            double y = part.positionGetY();
            g.setPaint(Color.BLACK);
            //// TEST 
           
            
            
            
            Shape particleNew = new Rectangle((int) part.getEmitterOriginX() + (int)x,
                    (int)part.getEmitterOriginY() +(int)y, 15,15);
            part.setParticleRect(particleNew);
            g.fill(particleNew);
            if (lifetime > 200) {
                particleList.remove(part);
                part = null;
            }
            
            }
        
                
        
           
    
}

}
